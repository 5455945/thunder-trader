project(auto_trade_machine)
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-Bsymbolic")
    set(BOOST_THREAD "boost_thread-mt")
else()
    set(BOOST_THREAD "boost_thread")
endif()
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
SET(CMAKE_BUILD_TYPE "Release")

include_directories("${PROJECT_SOURCE_DIR}/common")
include_directories("${PROJECT_SOURCE_DIR}/common/CompreTradeSystemHeader")  
include_directories("${PROJECT_SOURCE_DIR}/common/CTPForLinux32")  
include_directories("${PROJECT_SOURCE_DIR}/common/DfitcForLinux64")  
include_directories("${PROJECT_SOURCE_DIR}/common/Femas")  
include_directories("${PROJECT_SOURCE_DIR}/trade_system/AtmMarketDataPlugins")  
include_directories("${PROJECT_SOURCE_DIR}/trade_system/AtmTradePlugins")  
include_directories("${PROJECT_SOURCE_DIR}/common/Tick")  
SET(CTP_MD_PlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmMarketDataPlugins/CTP_FUTURE_MDPlugin")
SET(CTP_TD_PlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmTradePlugins/CTP_FUTURE_TDPlugin")
SET(DFITC_SOP_MDPlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmMarketDataPlugins/DFITC_SOP_MDPlugin")
SET(DFITC_SOP_TDPlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmTradePlugins/DFITC_SOP_TDPlugin")
SET(FEMAS_FUTURE_MDPlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmMarketDataPlugins/FEMAS_FUTURE_MDPlugin")
SET(FEMAS_FUTURE_TDPlugPath "${PROJECT_SOURCE_DIR}/trade_system/AtmTradePlugins/FEMAS_FUTURE_TDPlugin")
SET(ATMPath "${PROJECT_SOURCE_DIR}trade_system/ATM")
SET(PlugInDef "-DCTP_FUTURE_MDPlugin -DCTP_FUTURE_TDPlugin -DDFITC_SOP_MDPlugin -DDFITC_SOP_TDPlugin -DFEMAS_FUTURE_MDPlugin -DFEMAS_FUTURE_TDPlugin")
SET(soFiles "Lib/thostmduserapi.so Lib/thosttraderapi.so
Lib/libDFITCSECMdApi.so Lib/libDFITCSECTraderApi.so
Lib/libUSTPmduserapi.so Lib/libUSTPtraderapi.so")

SET(Libs=-ldl -lboost_system -lboost_filesystem -lpthread -lboost_thread -lboost_date_time -lboost_serialization -lboost_log_setup -lboost_log
SET(Configs=-g -std=c++0x -fexceptions -Wall -DBOOST_SPIRIT_THREADSAFE -DBOOST_ALL_DYN_LINK

message(STATUS "${BOOST_THREAD}")
add_definitions(-DBOOST_SPIRIT_THREADSAFE)
find_package(Boost REQUIRED COMPONENTS regex system thread serialization python date_time)
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
if(NOT Boost_FOUND)
    message("Can not find Boost")
endif()
message(STATUS "Found Boost IncPath ${Boost_INCLUDE_DIRS}")
message(STATUS "Found Boost LibPath ${Boost_LIBRARY_DIRS}")
find_package(PythonLibs)
if(NOT PythonLibs_FOUND)
    message("Can not find PythonLibs")
endif()
message(STATUS ${PYTHON_LIBRARIES})
message(STATUS ${PYTHON_INCLUDE_DIR})
message(STATUS ${PYTHON_LIBRARY})
message(STATUS ${PYTHONLIBS_VERSION_STRING})
set(LIBS_NEEDED ${mysql_library} boost_filesystem boost_system crypto boost_regex ${BOOST_THREAD} boost_serialization boost_date_time)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})
include_directories(${PYTHON_INCLUDE_DIR})
link_directories(${PYTHON_LIBRARY})
include_directories(${mysql_include_dir})
include_directories("${PROJECT_SOURCE_DIR}/public")
add_library(pyicp SHARED main.cpp )
#add_executable(pyicp  main.cpp)
if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    target_link_libraries(pyicp ${LIBS_NEEDED} boost_python)
else()
    target_link_libraries(pyicp ${LIBS_NEEDED} boost_python python2.7)
endif()
